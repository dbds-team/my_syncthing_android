name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/native
            ~/.konan
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Install Android SDK prerequisites
        run: |
          echo "Installing Android SDK prerequisites..."
          python3 scripts/install_minimum_android_sdk_prerequisites.py
          echo "ANDROID_HOME=$HOME/git/syncthing-android-prereq" >> $GITHUB_ENV
          echo "$HOME/git/syncthing-android-prereq/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/git/syncthing-android-prereq/platform-tools" >> $GITHUB_PATH
      
      - name: Get version from tag
        run: |
          # Get version from git tag (remove 'v' prefix)
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building version: $VERSION"
          
          # Get project name
          PROJECT_NAME="syncthing-android"
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          echo "Project name: $PROJECT_NAME"
      
      - name: Setup signing configuration
        env:
          KEY_JKS: ${{ secrets.KEY_JKS }}
          ALIAS: ${{ secrets.ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        run: |
          echo "Setting up signing configuration..."
          
          # Debug: Check if secrets are set (without exposing values)
          if [ -z "$KEY_JKS" ]; then
            echo "Warning: KEY_JKS is not set"
          else
            echo "KEY_JKS is set (length: ${#KEY_JKS})"
          fi
          
          if [ -z "$ALIAS" ]; then
            echo "Warning: ALIAS is not set"
          else
            echo "ALIAS is set: $ALIAS"
          fi
          
          if [ -z "$ANDROID_KEY_PASSWORD" ]; then
            echo "Warning: ANDROID_KEY_PASSWORD is not set"
          else
            echo "ANDROID_KEY_PASSWORD is set"
          fi
          
          if [ -z "$ANDROID_STORE_PASSWORD" ]; then
            echo "Warning: ANDROID_STORE_PASSWORD is not set"
          else
            echo "ANDROID_STORE_PASSWORD is set"
          fi
          
          # Create keystore from base64
          if [ -n "$KEY_JKS" ]; then
            echo "$KEY_JKS" | base64 -d > ${{ runner.temp }}/release.keystore
            echo "Keystore file created at ${{ runner.temp }}/release.keystore"
            
            # Set environment variables for Gradle
            echo "SYNCTHING_RELEASE_STORE_FILE=${{ runner.temp }}/release.keystore" >> $GITHUB_ENV
            echo "SYNCTHING_RELEASE_KEY_ALIAS=$ALIAS" >> $GITHUB_ENV
            echo "SIGNING_PASSWORD=$ANDROID_STORE_PASSWORD" >> $GITHUB_ENV
            
            echo "Signing configuration ready"
          else
            echo "No signing key provided, will build unsigned APK"
          fi
      
      - name: Build native Syncthing
        run: |
          echo "Building native Syncthing..."
          ./gradlew --no-daemon --parallel --max-workers=4 buildNative
      
      - name: Build release APK
        run: |
          echo "Building release APK..."
          echo "Java version:"
          java -version
          echo "Gradle version:"
          ./gradlew --version
          
          # Build with parallel execution for speed
          ./gradlew --no-daemon --parallel --max-workers=4 assembleRelease
          
          echo "Build completed. Listing output files:"
          ls -la app/build/outputs/apk/release/
      
      - name: Rename and prepare APK
        run: |
          echo "Renaming APK file..."
          
          # Find the built APK (could be signed or unsigned)
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            SOURCE_APK="app/build/outputs/apk/release/app-release.apk"
            echo "Found signed APK: $SOURCE_APK"
          elif [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            SOURCE_APK="app/build/outputs/apk/release/app-release-unsigned.apk"
            echo "Found unsigned APK: $SOURCE_APK"
          else
            echo "Error: No APK file found!"
            exit 1
          fi
          
          # Rename to project-version.apk
          FINAL_APK="${PROJECT_NAME}-${VERSION}.apk"
          cp "$SOURCE_APK" "app/build/outputs/apk/release/$FINAL_APK"
          echo "APK renamed to: $FINAL_APK"
          
          # Save final APK name for later steps
          echo "FINAL_APK=$FINAL_APK" >> $GITHUB_ENV
          
          # Show APK info
          echo "APK file info:"
          ls -lh "app/build/outputs/apk/release/$FINAL_APK"
          
          # Verify APK with aapt if available
          if command -v aapt &> /dev/null; then
            echo "APK package info:"
            aapt dump badging "app/build/outputs/apk/release/$FINAL_APK" | head -10
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          files: |
            app/build/outputs/apk/release/${{ env.FINAL_APK }}
          body: |
            ## ${{ env.PROJECT_NAME }} ${{ github.ref_name }}
            
            ### Downloads
            - [${{ env.FINAL_APK }}](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.FINAL_APK }})
            
            ### Installation
            1. Download the APK file
            2. Enable "Install from unknown sources" in your Android settings
            3. Install the APK
            
            ### Version Information
            - Version: ${{ env.VERSION }}
            - Build Date: ${{ github.event.head_commit.timestamp }}
            - Commit: ${{ github.sha }}
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FINAL_APK }}
          path: app/build/outputs/apk/release/${{ env.FINAL_APK }}
          retention-days: 30